package ${outputPackage};

<#if withGET>import java.util.List;
import java.util.stream.Collectors;
</#if>
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
<#if hasIdProperty>import ${resourceRepresentation.qualifiedName};
import ${keyProperty.type.qualifiedName}; 
</#if>
/**
 * this class maps ${resourceName} REST operations to
 * the ${domainClassName} pojo.
 */

@RequestScoped
public class Mapped${resourceName}ResourceController implements I${resourceName}ResourceController {

	@Inject
	private I${domainClassName}Controller ${domainClassName?uncap_first}Controller;
	
	@Inject
	private ${resourceName}ResourceMapper resourceMapper;
	
	@Inject
	private ${domainClassName}Mapper ${domainClassName?uncap_first}Mapper;
	
	@Inject
	private TransactionRunner runner;

	private <T> T transactional(TransactionRunner.TransactionalBlock<T> blk) {
		return runner.run(blk);
	}
	
	
<#if withPOST && hasIdProperty> 	@Override
	public ${keyPropertyType} create(${resourceRepresentation.name} rro) {
		// convert from the resource to the input domain object
		${domainClassName} input${domainClassName} = resourceMapper.map(rro);
		
		// call the controller to 'create' the object
		${resourceRepresentation.name} result = transactional( () -> {
			${domainClassName} created = ${domainClassName?uncap_first}Controller.create(input${domainClassName});
			
			// map the return value to a resource representation
			return ${domainClassName?uncap_first}Mapper.map(created);
		});
		return result.get${keyName?capitalize}();
	}
</#if>
<#if withGET && hasIdProperty> 	@Override
	public ${resourceRepresentation.name} get(${keyPropertyType} ${keyName}) {
		
		${resourceRepresentation.name} result = transactional(() -> {
			${domainClassName} ${domainClassName?uncap_first} = ${domainClassName?uncap_first}Controller.findByGuid(guid);
			return ${domainClassName?uncap_first}Mapper.map(${domainClassName?uncap_first});
		});
		return result;
	}
</#if>
<#if withDELETE  && hasIdProperty> 	@Override
	public void remove(${keyPropertyType} ${keyName}) {
		${domainClassName?uncap_first}Controller.remove(${keyName});
	}
</#if>

<#if withPUT && hasIdProperty> 	@Override
	public ${resourceRepresentation.name} update(${keyPropertyType} ${keyName}, ${resourceRepresentation.name} rro) {

		${domainClassName} input${domainClassName} = resourceMapper.map(rro);

		${resourceRepresentation.name} result = transactional(() -> {
			${domainClassName} updated = ${domainClassName?uncap_first}Controller.update(guid, input${domainClassName});
			return ${domainClassName?uncap_first}Mapper.map(updated);
		});
		return result;
	}</#if>
<#if withGET>	// add get methods returning lists to I${resourceName}ResourcesClass
	
 	@Override
	public List<${resourceRepresentation.name}> getAll(Integer startPosition, Integer maxResult) {
		return transactional(() -> {
			return ${domainClassName?uncap_first}Controller
					.findAll()
					.stream()
					.map((n) -> ${domainClassName?uncap_first}Mapper.map(n))
					.collect(Collectors.toList());
		});
	}
</#if>}
