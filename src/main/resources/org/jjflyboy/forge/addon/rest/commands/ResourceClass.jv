package ${targetPackage};

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import ${resourceRepresentation.qualifiedName};

@Path("${resourcePath}")
public class ${resourceName}ResourceClass implements I${resourceName}ResourceClass, I${resourceName}ResourcesClass {

	@Inject
	private I${resourceName}ResourceController resourceController;
	
	@GET
	@Path("{id}")
 	@Produces({${contentTypes?join(", ")}})
 	@Override
	public Response getByBusinessKey(@PathParam("id") String businessKey) {
		return resourceController.getByBusinessKey(businessKey);
	}
	
	@GET
	@Override
	@Produces({${contentTypes?join(", ")}})
	public Response getAll() {
		return resourceController.getAll();
	}
	
	@POST
 	@Override
	@Consumes({${contentTypes?join(", ")}})
	public Response create(${resourceRepresentation.name} rro) {
		return resourceController.create(rro);
	}
	
	@DELETE
	@Path("{id}")
 	@Override
	public Response removeByBusinessKey(@PathParam("id") String businessKey) {
		return resourceController.removeByBusinessKey(businessKey);
	}
	
	@PUT
	@Path("{id}")
	@Consumes({${contentTypes?join(", ")}})
 	@Override
	public Response update(@PathParam("id") String businessKey, ${resourceRepresentation.name} rro) {
		return resourceController.update(businessKey, rro);
	}
}
