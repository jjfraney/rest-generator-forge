package ${targetPackage};

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import ${resourceRepresentation.qualifiedName};

@Path("${resourcePath}")
public class ${resourceName}ResourceClass implements I${resourceName}ResourceClass, I${resourceName}ResourcesClass {

	@Inject
	private I${resourceName}ResourceController resourceController;

	@GET
	@Path("{${keyName}}")
 	@Produces({${contentTypes?join(", ")}})
 	@Override
	public Response getBy${keyPropertyName}(@PathParam("${keyName}") ${keyPropertyType} ${keyName}) {
		return resourceController.getBy${keyPropertyName}(${keyName});
	}

	@GET
	@Override
	@Produces({${contentTypes?join(", ")}})
	public Response getAll(@QueryParam("start") Integer startPosition, @QueryParam("max") Integer maxResult) {
		return resourceController.getAll(startPosition, maxResult);
	}

	// add get methods returning lists to I${resourceName}ResourcesClass


	@POST
 	@Override
	@Consumes({${contentTypes?join(", ")}})
	public Response create(${resourceRepresentation.name} rro) {
		return resourceController.create(rro);
	}

	@DELETE
	@Path("{${keyName}}")
 	@Override
	public Response removeBy${keyPropertyName}(@PathParam("${keyName}") ${keyPropertyType} ${keyName}) {
		return resourceController.removeBy${keyPropertyName}(${keyName});
	}

	@PUT
	@Path("{${keyName}}")
	@Consumes({${contentTypes?join(", ")}})
 	@Override
	public Response update(@PathParam("${keyName}") ${keyPropertyType} ${keyName}, ${resourceRepresentation.name} rro) {
		return resourceController.update(${keyName}, rro);
	}
}

